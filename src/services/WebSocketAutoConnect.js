// WebSocketAutoConnect.js - Service t·ª± ƒë·ªông k·∫øt n·ªëi WebSocket khi c√≥ token
import webSocketService from './WebSocketService';
import AsyncStorage from '@react-native-async-storage/async-storage';

class WebSocketAutoConnect {
    constructor() {
        this.isInitialized = false;
        this.connectionPromise = null;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 3;
    }

    /**
     * Kh·ªüi t·∫°o v√† t·ª± ƒë·ªông k·∫øt n·ªëi WebSocket
     */
    async initialize() {
        if (this.isInitialized) {
            return;
        }

        console.log('üîå Initializing WebSocket Auto Connect...');
        
        try {
            // L·∫Øng nghe thay ƒë·ªïi token trong AsyncStorage
            this._setupTokenListener();
            
            // Th·ª≠ k·∫øt n·ªëi ngay l·∫≠p t·ª©c v·ªõi token hi·ªán t·∫°i
            await this._attemptConnection();
            
            this.isInitialized = true;
            console.log('‚úÖ WebSocket Auto Connect initialized');
        } catch (error) {
            console.warn('‚ö†Ô∏è WebSocket Auto Connect initialization failed:', error);
        }
    }

    /**
     * Th·ª≠ k·∫øt n·ªëi WebSocket v·ªõi token ƒë√£ l∆∞u
     */
    async _attemptConnection() {
        if (this.connectionPromise) {
            return this.connectionPromise;
        }

        this.connectionPromise = this._doConnect();
        
        try {
            await this.connectionPromise;
        } catch (error) {
            console.warn('WebSocket connection failed:', error);
        } finally {
            this.connectionPromise = null;
        }
    }

    async _doConnect() {
        try {
            const token = await AsyncStorage.getItem('accessToken');
            
            if (!token) {
                console.log('üí§ No token available, skipping WebSocket connection');
                return;
            }

            if (webSocketService.isConnected()) {
                console.log('‚úÖ WebSocket already connected');
                return;
            }

            console.log('üîÑ Connecting WebSocket with stored token...');
            await webSocketService.connect(token);
            
            this.reconnectAttempts = 0;
            console.log('‚úÖ WebSocket connected successfully');
            
        } catch (error) {
            console.error('‚ùå WebSocket connection failed:', error);
            this._scheduleReconnect();
            throw error;
        }
    }

    /**
     * L√™n l·ªãch k·∫øt n·ªëi l·∫°i
     */
    _scheduleReconnect() {
        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            console.log('‚ùå Max reconnect attempts reached');
            return;
        }

        this.reconnectAttempts++;
        const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);
        
        console.log(`üîÑ Scheduling reconnect attempt ${this.reconnectAttempts} in ${delay}ms`);
        
        setTimeout(() => {
            this._attemptConnection();
        }, delay);
    }

    /**
     * Setup listener ƒë·ªÉ theo d√µi thay ƒë·ªïi token
     */
    _setupTokenListener() {
        // Trong m√¥i tr∆∞·ªùng React Native, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng AppState
        // ƒë·ªÉ detect khi app active v√† check token
        if (typeof window !== 'undefined' && window.addEventListener) {
            window.addEventListener('focus', () => {
                if (!webSocketService.isConnected()) {
                    console.log('üîÑ App focused, attempting WebSocket reconnection...');
                    this._attemptConnection();
                }
            });
        }
    }

    /**
     * Force reconnect (cho debugging ho·∫∑c manual retry)
     */
    async forceReconnect() {
        console.log('üîÑ Force reconnecting WebSocket...');
        this.reconnectAttempts = 0;
        
        if (webSocketService.isConnected()) {
            webSocketService.disconnect();
        }
        
        await this._attemptConnection();
    }

    /**
     * Disconnect
     */
    disconnect() {
        console.log('üîå Disconnecting WebSocket Auto Connect...');
        if (webSocketService.isConnected()) {
            webSocketService.disconnect();
        }
        this.isInitialized = false;
        this.reconnectAttempts = 0;
    }

    /**
     * Check connection status
     */
    isConnected() {
        return webSocketService.isConnected();
    }

    /**
     * Manually connect v·ªõi token
     */
    async connectWithToken(token) {
        try {
            if (token) {
                await AsyncStorage.setItem('accessToken', token);
            }
            await this._attemptConnection();
        } catch (error) {
            console.error('‚ùå Manual connect failed:', error);
            throw error;
        }
    }
}

// Export singleton instance
const webSocketAutoConnect = new WebSocketAutoConnect();
export default webSocketAutoConnect; 