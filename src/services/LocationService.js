import * as Location from 'expo-location';
import AsyncStorage from '@react-native-async-storage/async-storage';
import api, { API_ENDPOINTS, formatEndpoint } from './api';
import { Platform } from 'react-native';

/**
 * Service x·ª≠ l√Ω v·ªã tr√≠ ng∆∞·ªùi d√πng, t√≠ch h·ª£p v·ªõi BE UserLocationService
 */
class LocationService {
  // Ki·ªÉm tra quy·ªÅn truy c·∫≠p v·ªã tr√≠
  async getLocationPermissionStatus() {
    try {
      const { status } = await Location.getForegroundPermissionsAsync();
      return status;
    } catch (error) {
      console.error('Error checking location permission:', error);
      throw error;
    }
  }

  // Y√™u c·∫ßu quy·ªÅn truy c·∫≠p v·ªã tr√≠
  async requestLocationPermission() {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      return status;
    } catch (error) {
      console.error('Error requesting location permission:', error);
      throw error;
    }
  }

  // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
  async getCurrentLocation(options = {}) {
    try {
      // 1. Ki·ªÉm tra quy·ªÅn truy c·∫≠p v·ªã tr√≠
      const permissionStatus = await this.getLocationPermissionStatus();
      console.log('üìç Location permission status:', permissionStatus);
      
      if (permissionStatus !== 'granted') {
        console.log('üìç Requesting location permission...');
        const requestResult = await this.requestLocationPermission();
        if (requestResult !== 'granted') {
          throw new Error('LOCATION_PERMISSION_DENIED');
        }
      }

      // 2. Ki·ªÉm tra xem d·ªãch v·ª• v·ªã tr√≠ c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
      const isLocationServicesEnabled = await Location.hasServicesEnabledAsync();
      console.log('üìç Location services enabled:', isLocationServicesEnabled);
      
      if (!isLocationServicesEnabled) {
        throw new Error('LOCATION_SERVICES_DISABLED');
      }
      
      // 3. Th·ª≠ l·∫•y v·ªã tr√≠ cu·ªëi c√πng ƒë√£ bi·∫øt tr∆∞·ªõc (nhanh h∆°n)
      console.log('üìç Trying to get last known position...');
      const lastKnownPosition = await Location.getLastKnownPositionAsync({
        maxAge: 300000, // 5 ph√∫t
        requiredAccuracy: 1000 // 1km
      });
      
      if (lastKnownPosition) {
        console.log('üìç Using last known position:', lastKnownPosition.coords);
        return lastKnownPosition;
      }
      
      // 4. Th·ª≠ l·∫•y v·ªã tr√≠ v·ªõi m·ª©c ƒë·ªô ch√≠nh x√°c th·∫•p tr∆∞·ªõc (nhanh nh·∫•t)
      console.log('üìç Getting current position with low accuracy...');
      try {
        const location = await Location.getCurrentPositionAsync({
          accuracy: Location.Accuracy.Low,
          timeout: 10000,
          maximumAge: 60000, // 1 ph√∫t
          ...options
        });
        console.log('üìç Got location with low accuracy:', location.coords);
        return location;
      } catch (lowAccuracyError) {
        console.warn('üìç Failed with low accuracy:', lowAccuracyError.message);
        
        // 5. Th·ª≠ v·ªõi ƒë·ªô ch√≠nh x√°c c√¢n b·∫±ng
        console.log('üìç Trying with balanced accuracy...');
        try {
          const location = await Location.getCurrentPositionAsync({
            accuracy: Location.Accuracy.Balanced,
            timeout: 15000,
            maximumAge: 30000, // 30 gi√¢y
            ...options
          });
          console.log('üìç Got location with balanced accuracy:', location.coords);
          return location;
        } catch (balancedAccuracyError) {
          console.warn('üìç Failed with balanced accuracy:', balancedAccuracyError.message);
          
          // 6. Th·ª≠ l·∫•y v·ªã tr√≠ cu·ªëi c√πng v·ªõi ti√™u ch√≠ r·ªông h∆°n
          console.log('üìç Trying last known position with relaxed criteria...');
          const fallbackPosition = await Location.getLastKnownPositionAsync({
            maxAge: 3600000, // 1 gi·ªù
            requiredAccuracy: 5000 // 5km
          });
          
          if (fallbackPosition) {
            console.log('üìç Using fallback position:', fallbackPosition.coords);
            return fallbackPosition;
          }
          
          // 7. N·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i, n√©m l·ªói v·ªõi th√¥ng tin chi ti·∫øt
          console.error('üìç All location methods failed');
          throw new Error('LOCATION_UNAVAILABLE');
        }
      }
    } catch (error) {
      console.error('‚ùå Error getting current location:', error);
      
      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
      if (error.message === 'LOCATION_PERMISSION_DENIED') {
        throw new Error('Vui l√≤ng cho ph√©p ·ª©ng d·ª•ng truy c·∫≠p v·ªã tr√≠ trong C√†i ƒë·∫∑t');
      } else if (error.message === 'LOCATION_SERVICES_DISABLED') {
        throw new Error('Vui l√≤ng b·∫≠t GPS/ƒê·ªãnh v·ªã trong C√†i ƒë·∫∑t thi·∫øt b·ªã');
      } else if (error.message === 'LOCATION_UNAVAILABLE') {
        throw new Error('Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi GPS');
      } else {
        throw new Error('L·ªói khi l·∫•y v·ªã tr√≠: ' + error.message);
      }
    }
  }

  // L·∫•y ƒë·ªãa ch·ªâ t·ª´ t·ªça ƒë·ªô
  async getAddressFromCoordinates(coords) {
    try {
      const [addressData] = await Location.reverseGeocodeAsync({
        latitude: coords.latitude,
        longitude: coords.longitude
      });

      if (!addressData) {
        throw new Error('Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ');
      }

      // T·∫°o ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß t·ª´ d·ªØ li·ªáu
      const formattedAddress = [
        addressData.street,
        addressData.district,
        addressData.city,
        addressData.region,
        addressData.country
      ]
        .filter(Boolean)
        .join(', ');

      return {
        ...addressData,
        formattedAddress
      };
    } catch (error) {
      console.error('Error getting address from coordinates:', error);
      throw error;
    }
  }

  // L·∫•y t·ªça ƒë·ªô t·ª´ ƒë·ªãa ch·ªâ
  async getCoordinatesFromAddress(address) {
    try {
      const locationData = await Location.geocodeAsync(address);

      if (locationData.length === 0) {
        throw new Error('Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ cho ƒë·ªãa ch·ªâ n√†y');
      }

      return locationData[0];
    } catch (error) {
      console.error('Error getting coordinates from address:', error);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t v·ªã tr√≠ ng∆∞·ªùi d√πng l√™n server
   * T√≠ch h·ª£p v·ªõi updateUserLocation c·ªßa backend
   * @param {object} coords - T·ªça ƒë·ªô t·ª´ expo-location 
   * @param {string} privacyLevel - PUBLIC, FRIENDS_ONLY, PRIVATE
   * @param {object} additionalInfo - Th√¥ng tin b·ªï sung v·ªÅ v·ªã tr√≠
   * @returns {Promise} K·∫øt qu·∫£ c·∫≠p nh·∫≠t v·ªã tr√≠
   */
  async updateUserLocation(userId, coords, privacyLevel = 'FRIENDS_ONLY', additionalInfo = {}) {
    try {
      // L·∫•y th√¥ng tin ƒë·ªãa ch·ªâ t·ª´ t·ªça ƒë·ªô n·∫øu c√≥ th·ªÉ v√† kh√¥ng ƒë∆∞·ª£c cung c·∫•p
      let address = additionalInfo.address;
      let city = additionalInfo.city;
      let district = additionalInfo.district;
      let ward = additionalInfo.ward;
      
      if (!address && !city) {
        try {
          const addressData = await this.getAddressFromCoordinates(coords);
          if (addressData) {
            address = address || addressData.formattedAddress;
            city = city || addressData.city;
            district = district || addressData.district;
            ward = ward || addressData.subregion;
          }
        } catch (addrError) {
          console.warn('Could not get address for coordinates', addrError);
        }
      }
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n server theo ƒë·ªãnh d·∫°ng LocationUpdateRequest
      const payload = {
        latitude: coords.latitude,
        longitude: coords.longitude,
        privacyLevel: privacyLevel,
        address: address,
        city: city,
        district: district,
        ward: ward,
        locationName: additionalInfo.locationName || null,
        isCurrentLocation: additionalInfo.isCurrentLocation !== undefined ? additionalInfo.isCurrentLocation : true,
        accuracyMeters: coords.accuracy || 10.0,
        locationSource: additionalInfo.locationSource || "GPS"
      };
      
      const response = await api.post(API_ENDPOINTS.USER_LOCATION, payload);
      return response.data;
    } catch (error) {
      console.error('Error updating user location:', error);
      throw error;
    }
  }
  
  /**
   * C·∫≠p nh·∫≠t v·ªã tr√≠ ƒë·∫ßy ƒë·ªß v·ªõi to√†n b·ªô th√¥ng tin
   * @param {object} locationData - ƒê·∫ßy ƒë·ªß th√¥ng tin v·ªã tr√≠ theo LocationUpdateRequest
   * @returns {Promise} K·∫øt qu·∫£ c·∫≠p nh·∫≠t v·ªã tr√≠
   */
  async updateFullUserLocation(locationData) {
    try {
      // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
      if (!locationData.latitude || !locationData.longitude) {
        throw new Error('Latitude v√† longitude l√† b·∫Øt bu·ªôc');
      }
      
      const response = await api.post(API_ENDPOINTS.USER_LOCATION, locationData);
      return response.data;
    } catch (error) {
      console.error('Error updating full user location:', error);
      throw error;
    }
  }

  // T√≠nh kho·∫£ng c√°ch gi·ªØa hai v·ªã tr√≠ (tr·∫£ v·ªÅ kho·∫£ng c√°ch theo km)
  calculateDistance(coords1, coords2) {
    // S·ª≠ d·ª•ng c√¥ng th·ª©c Haversine ƒë·ªÉ t√≠nh kho·∫£ng c√°ch
    const toRadians = (degree) => degree * (Math.PI / 180);
    
    const R = 6371; // B√°n k√≠nh tr√°i ƒë·∫•t theo km
    const dLat = toRadians(coords2.latitude - coords1.latitude);
    const dLon = toRadians(coords2.longitude - coords1.longitude);
    
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(toRadians(coords1.latitude)) * Math.cos(toRadians(coords2.latitude)) * 
      Math.sin(dLon/2) * Math.sin(dLon/2);
    
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    const distance = R * c; // Kho·∫£ng c√°ch theo km
    
    return distance;
  }

  // L∆∞u c√†i ƒë·∫∑t v·ªã tr√≠ v√†o AsyncStorage
  async saveLocationSettings(settings) {
    try {
      await AsyncStorage.setItem('locationSettings', JSON.stringify(settings));
      
      // N·∫øu ng∆∞·ªùi d√πng ch·ªçn chia s·∫ª v·ªã tr√≠
      if (settings.shareLocation) {
        await this.enableLocationSharing();
      } else {
        await this.disableLocationSharing();
      }
      
      // C·∫≠p nh·∫≠t m·ª©c ƒë·ªô ri√™ng t∆∞ n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
      if (settings.privacyLevel) {
        await this.updateLocationPrivacy(settings.privacyLevel);
      }
      
      return true;
    } catch (error) {
      console.error('Error saving location settings:', error);
      return false;
    }
  }

  // L·∫•y c√†i ƒë·∫∑t v·ªã tr√≠ t·ª´ AsyncStorage
  async loadLocationSettings() {
    try {
      // ƒê·∫ßu ti√™n l·∫•y t·ª´ localStorage
      const settingsString = await AsyncStorage.getItem('locationSettings');
      let settings = null;
      
      if (settingsString) {
        settings = JSON.parse(settingsString);
      } else {
        // C√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
        settings = {
          shareLocation: false,
          notifyNearbyFriends: false,
          autoUpdateLocation: true,
          locationUpdateFrequency: 'medium',
          nearbyDistance: 'medium',
          privacyLevel: 'PUBLIC'
        };
      }
      
      // Th·ª≠ l·∫•y d·ªØ li·ªáu v·ªã tr√≠ hi·ªán t·∫°i t·ª´ server ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i chia s·∫ª
      try {
        const serverLocation = await this.getCurrentUserLocationFromServer();
        if (serverLocation) {
          // C·∫≠p nh·∫≠t c√†i ƒë·∫∑t t·ª´ server
          settings.shareLocation = true;
          settings.privacyLevel = serverLocation.privacyLevel;
        }
      } catch (error) {
        // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª´ server th√¨ gi·ªØ nguy√™n gi√° tr·ªã t·ª´ local
        console.log('Could not fetch location from server, using local settings');
      }
      
      // L∆∞u l·∫°i c√°c c√†i ƒë·∫∑t sau khi ƒë√£ c·∫≠p nh·∫≠t
      await AsyncStorage.setItem('locationSettings', JSON.stringify(settings));
      
      return settings;
    } catch (error) {
      console.error('Error loading location settings:', error);
      return {
        shareLocation: false,
        notifyNearbyFriends: false,
        autoUpdateLocation: true,
        locationUpdateFrequency: 'medium',
        nearbyDistance: 'medium',
        privacyLevel: 'PUBLIC'
      };
    }
  }
  
  // B·∫≠t/t·∫Øt chia s·∫ª v·ªã tr√≠ v√† ƒë·ªìng b·ªô v·ªõi server
  async toggleLocationSharing(value, coords) {
    try {
      // C·∫≠p nh·∫≠t AsyncStorage
      const settings = await this.loadLocationSettings();
      settings.shareLocation = value;
      await AsyncStorage.setItem('locationSettings', JSON.stringify(settings));
      
      // C·∫≠p nh·∫≠t tr√™n server
      if (value) {
        // N·∫øu b·∫≠t chia s·∫ª v√† c√≥ t·ªça ƒë·ªô, kh√¥ng c·∫ßn c·∫≠p nh·∫≠t ngay v·ªã tr√≠
        // v√¨ ng∆∞·ªùi g·ªçi s·∫Ω g·ªçi updateUserLocation ri√™ng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
        
        // B·∫≠t chia s·∫ª v·ªã tr√≠
        await this.enableLocationSharing();
      } else {
        // T·∫Øt chia s·∫ª v·ªã tr√≠
        await this.disableLocationSharing();
      }
      
      return true;
    } catch (error) {
      console.error('Error toggling location sharing:', error);
      return false;
    }
  }
  
  // T√¨m ng∆∞·ªùi d√πng g·∫ßn ƒë√¢y
  async findNearbyUsers(coords, radius = 5.0) { // radius t√≠nh theo km
    try {
      const response = await api.get(API_ENDPOINTS.USER_NEARBY, {
        params: {
          latitude: coords.latitude,
          longitude: coords.longitude,
          radius: radius
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error finding nearby users:', error);
      throw error;
    }
  }
  
  // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng t·ª´ server
  async getCurrentUserLocationFromServer() {
    try {
      const response = await api.get(API_ENDPOINTS.USER_LOCATION_ME);
      return response.data;
    } catch (error) {
      console.error('Error getting current user location from server:', error);
      throw error;
    }
  }
  
  // C·∫≠p nh·∫≠t m·ª©c ƒë·ªô ri√™ng t∆∞ cho v·ªã tr√≠
  async updateLocationPrivacy(privacyLevel) {
    try {
      await api.put(API_ENDPOINTS.USER_LOCATION_PRIVACY, null, {
        params: { privacyLevel }
      });
      return true;
    } catch (error) {
      console.error('Error updating location privacy:', error);
      throw error;
    }
  }
  
  // B·∫≠t chia s·∫ª v·ªã tr√≠
  async enableLocationSharing() {
    try {
      await api.put(API_ENDPOINTS.USER_LOCATION_ENABLE);
      return true;
    } catch (error) {
      console.error('Error enabling location sharing:', error);
      throw error;
    }
  }
  
  // T·∫Øt chia s·∫ª v·ªã tr√≠
  async disableLocationSharing() {
    try {
      await api.put(API_ENDPOINTS.USER_LOCATION_DISABLE);
      return true;
    } catch (error) {
      console.error('Error disabling location sharing:', error);
      throw error;
    }
  }
  
  // X√≥a v·ªã tr√≠ ng∆∞·ªùi d√πng
  async deleteUserLocation() {
    try {
      await api.delete(API_ENDPOINTS.USER_LOCATION);
      return true;
    } catch (error) {
      console.error('Error deleting user location:', error);
      throw error;
    }
  }
  
  /**
   * T√¨m b·∫°n b√® g·∫ßn ƒë√≥
   * T√≠ch h·ª£p v·ªõi findNearbyFriends backend
   */
  async findNearbyFriends(coords, radius = 5.0) {
    try {
      const response = await api.get(`${API_ENDPOINTS.USER_NEARBY}/friends`, {
        params: {
          latitude: coords.latitude,
          longitude: coords.longitude,
          radius: radius
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error finding nearby friends:', error);
      throw error;
    }
  }
  
  // Chuy·ªÉn ƒë·ªïi c√†i ƒë·∫∑t t·∫ßn su·∫•t c·∫≠p nh·∫≠t th√†nh milliseconds
  getUpdateIntervalFromFrequency(frequency) {
    switch (frequency) {
      case 'low':
        return 5 * 60 * 1000; // 5 ph√∫t
      case 'medium':
        return 2 * 60 * 1000; // 2 ph√∫t
      case 'high':
        return 30 * 1000; // 30 gi√¢y
      default:
        return 2 * 60 * 1000; // M·∫∑c ƒë·ªãnh 2 ph√∫t
    }
  }
  
  // Chuy·ªÉn ƒë·ªïi c√†i ƒë·∫∑t kho·∫£ng c√°ch th√†nh km
  getDistanceFromSetting(distance) {
    switch (distance) {
      case 'close':
        return 1; // 1km
      case 'medium':
        return 5; // 5km
      case 'far':
        return 10; // 10km
      default:
        return 5; // M·∫∑c ƒë·ªãnh 5km
    }
  }
  
  /**
   * Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ·ªü trong khu v·ª±c c·ª• th·ªÉ kh√¥ng
   * T√≠ch h·ª£p v·ªõi isUserInArea backend
   */
  async isUserInArea(centerCoords, radius) {
    try {
      // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
      const userLocation = await this.getCurrentUserLocationFromServer();
      
      if (!userLocation) {
        return false;
      }
      
      // T√≠nh kho·∫£ng c√°ch
      const distance = this.calculateDistance(
        { latitude: userLocation.latitude, longitude: userLocation.longitude },
        centerCoords
      );
      
      return distance <= radius;
    } catch (error) {
      console.error('Error checking if user is in area:', error);
      return false;
    }
  }
  
  /**
   * L·∫•y l·ªãch s·ª≠ v·ªã tr√≠ ng∆∞·ªùi d√πng
   */
  async getUserLocationHistory(limit = 10) {
    try {
      const response = await api.get(`${API_ENDPOINTS.USER_LOCATION}/history`, {
        params: { limit }
      });
      return response.data;
    } catch (error) {
      console.error('Error getting location history:', error);
      throw error;
    }
  }

  /**
   * Ki·ªÉm tra v√† y√™u c·∫ßu quy·ªÅn v·ªã tr√≠, ƒë·∫£m b·∫£o d·ªãch v·ª• v·ªã tr√≠ ƒë∆∞·ª£c b·∫≠t
   */
  async ensureLocationAvailable() {
    // Ki·ªÉm tra quy·ªÅn
    const permissionStatus = await this.getLocationPermissionStatus();
    if (permissionStatus !== 'granted') {
      const newStatus = await this.requestLocationPermission();
      if (newStatus !== 'granted') {
        throw new Error('PERMISSION_DENIED');
      }
    }
    
    // Ki·ªÉm tra d·ªãch v·ª• v·ªã tr√≠
    const isEnabled = await Location.hasServicesEnabledAsync();
    if (!isEnabled) {
      // Tr√™n m·ªôt s·ªë thi·∫øt b·ªã, b·∫°n c√≥ th·ªÉ m·ªü c√†i ƒë·∫∑t v·ªã tr√≠
      if (Platform.OS === 'android') {
        await Location.enableNetworkProviderAsync().catch(e => {
          console.warn('Could not enable location provider:', e);
        });
        
        // Ki·ªÉm tra l·∫°i sau khi c·ªë g·∫Øng b·∫≠t
        const recheck = await Location.hasServicesEnabledAsync();
        if (!recheck) {
          throw new Error('LOCATION_SERVICES_DISABLED');
        }
      } else {
        throw new Error('LOCATION_SERVICES_DISABLED');
      }
    }
    
    return true;
  }
  
  // Ph∆∞∆°ng th·ª©c an to√†n ƒë·ªÉ l·∫•y v·ªã tr√≠, v·ªõi nhi·ªÅu l·ªõp d·ª± ph√≤ng
  async getLocationSafely() {
    try {
      // ƒê·∫£m b·∫£o quy·ªÅn v√† d·ªãch v·ª• v·ªã tr√≠ ƒë∆∞·ª£c b·∫≠t
      await this.ensureLocationAvailable();
      
      try {
        // Th·ª≠ v·ªõi m·ª©c ƒë·ªô ch√≠nh x√°c th·∫•p tr∆∞·ªõc
        return await Location.getCurrentPositionAsync({
          accuracy: Location.Accuracy.Low,
          timeout: 15000
        });
      } catch (e) {
        console.warn('Low accuracy location failed, trying with coarse accuracy:', e);
        
        try {
          // Th·ª≠ v·ªõi ƒë·ªô ch√≠nh x√°c th√¥
          return await Location.getCurrentPositionAsync({
            accuracy: Location.Accuracy.Lowest,
            timeout: 10000
          });
        } catch (e2) {
          console.warn('Coarse accuracy location failed, trying last known position:', e2);
          
          // Th·ª≠ l·∫•y v·ªã tr√≠ cu·ªëi c√πng ƒë√£ bi·∫øt
          const lastLocation = await Location.getLastKnownPositionAsync();
          if (lastLocation) return lastLocation;
          
          throw new Error('LOCATION_UNAVAILABLE');
        }
      }
    } catch (error) {
      console.error('Error in getLocationSafely:', error);
      throw error;
    }
  }
  
  // Phi√™n d·ªãch m√£ l·ªói th√†nh th√¥ng b√°o th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng
  getLocationErrorMessage(error) {
    if (!error) return 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y v·ªã tr√≠.';
    
    const errorMessage = error.message || '';
    
    if (errorMessage.includes('LOCATION_SERVICES_DISABLED') || 
        errorMessage.includes('unsatisfied device settings')) {
      return 'D·ªãch v·ª• v·ªã tr√≠ (GPS) ch∆∞a ƒë∆∞·ª£c b·∫≠t. Vui l√≤ng b·∫≠t GPS trong c√†i ƒë·∫∑t thi·∫øt b·ªã c·ªßa b·∫°n.';
    }
    
    if (errorMessage.includes('PERMISSION_DENIED') || 
        errorMessage.includes('Permission denied')) {
      return '·ª®ng d·ª•ng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v·ªã tr√≠. Vui l√≤ng c·∫•p quy·ªÅn trong c√†i ƒë·∫∑t.';
    }
    
    if (errorMessage.includes('LOCATION_UNAVAILABLE')) {
      return 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ hi·ªán t·∫°i. Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒëang ·ªü n∆°i c√≥ t√≠n hi·ªáu GPS t·ªët.';
    }
    
    if (errorMessage.includes('timed out')) {
      return 'Y√™u c·∫ßu v·ªã tr√≠ ƒë√£ h·∫øt th·ªùi gian ch·ªù. Vui l√≤ng ƒë·∫£m b·∫£o GPS ƒë∆∞·ª£c b·∫≠t v√† th·ª≠ l·∫°i.';
    }
    
    return `Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠: ${errorMessage}`;
  }

  /**
   * L·∫•y v·ªã tr√≠ v·ªõi fallback khi GPS kh√¥ng kh·∫£ d·ª•ng
   * S·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh (H√† N·ªôi) n·∫øu kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ th·ª±c
   */
  async getLocationWithFallback() {
    try {
      console.log('üìç Attempting to get location with fallback...');
      const location = await this.getCurrentLocation();
      return {
        coords: location.coords,
        source: 'GPS',
        accuracy: location.coords.accuracy || 10
      };
    } catch (error) {
      console.warn('üìç GPS unavailable, using fallback location:', error.message);
      
      // V·ªã tr√≠ m·∫∑c ƒë·ªãnh (H√† N·ªôi, Vi·ªát Nam)
      const fallbackLocation = {
        coords: {
          latitude: 21.0285,
          longitude: 105.8542,
          accuracy: 1000,
          altitude: null,
          altitudeAccuracy: null,
          heading: null,
          speed: null
        },
        source: 'FALLBACK',
        accuracy: 1000,
        timestamp: Date.now()
      };
      
      console.log('üìç Using fallback location (Hanoi):', fallbackLocation.coords);
      return fallbackLocation;
    }
  }
}

// Export m·ªôt instance duy nh·∫•t
export default new LocationService(); 