// FriendService.js - D·ª±a tr√™n ConnectionController
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { BASE_URL, DEFAULT_TIMEOUT, DEFAULT_HEADERS } from './api';

class FriendService {
    constructor() {
        this.api = axios.create({
            baseURL: `${BASE_URL}/v1/connections`,
            timeout: DEFAULT_TIMEOUT,
            headers: DEFAULT_HEADERS,
        });

        // Th√™m interceptor ƒë·ªÉ g·∫Øn token v√†o m·ªói request
        this.api.interceptors.request.use(
            async (config) => {
                try {
                    const token = await AsyncStorage.getItem('accessToken');
                    const tokenType = await AsyncStorage.getItem('tokenType') || 'Bearer';

                    if (token) {
                        config.headers.Authorization = `${tokenType} ${token}`;
                    }

                    console.log('Request URL:', config.baseURL + config.url);
                    console.log('Request Headers:', JSON.stringify(config.headers));

                    return config;
                } catch (error) {
                    console.error('Error setting auth token:', error);
                    return config;
                }
            },
            (error) => {
                return Promise.reject(error);
            }
        );

        // Interceptor ƒë·ªÉ x·ª≠ l√Ω ph·∫£n h·ªìi v√† l·ªói
        this.api.interceptors.response.use(
            (response) => {
                console.log('Response Status:', response.status);
                console.log('Response Data:', JSON.stringify(response.data).substring(0, 200) + '...');
                return response;
            },
            async (error) => {
                console.error('API Error:', error);

                if (error.response) {
                    console.error('Error status:', error.response.status);
                    console.error('Error data:', error.response.data);

                    // Ki·ªÉm tra l·ªói 401 (Unauthorized)
                    if (error.response.status === 401) {
                        global.authExpired = true;
                    }
                }

                return Promise.reject(error);
            }
        );
    }

    /**
     * G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n qua email
     * @param {string} receiverEmail - Email c·ªßa ng∆∞·ªùi nh·∫≠n l·ªùi m·ªùi
     * @returns {Promise} K·∫øt qu·∫£ g·ª≠i l·ªùi m·ªùi
     */
    async sendFriendRequestByEmail(receiverEmail) {
        try {
            console.log('ƒêang g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n t·ªõi:', receiverEmail);

            const response = await this.api.post('/send-request-by-email', null, {
                params: { receiverEmail }
            });

            console.log('Ph·∫£n h·ªìi t·ª´ API g·ª≠i l·ªùi m·ªùi:', response.data);
            return response.data;
        } catch (error) {
            console.error('Error sending friend request by email:', error);
            throw error;
        }
    }

    /**
     * G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n theo user ID
     * @param {number} userId - ID c·ªßa ng∆∞·ªùi nh·∫≠n l·ªùi m·ªùi
     * @returns {Promise} K·∫øt qu·∫£ g·ª≠i l·ªùi m·ªùi
     */
    async sendFriendRequestById(userId) {
        try {
            console.log('ƒêang g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n t·ªõi user ID:', userId);

            const response = await this.api.post(`/send-request/${userId}`);

            console.log('Ph·∫£n h·ªìi t·ª´ API g·ª≠i l·ªùi m·ªùi:', response.data);
            return response.data;
        } catch (error) {
            console.error('Error sending friend request by ID:', error);
            throw error;
        }
    }

    /**
     * Ch·∫•p nh·∫≠n y√™u c·∫ßu k·∫øt b·∫°n
     * @param {number} friendshipId - ID c·ªßa y√™u c·∫ßu k·∫øt b·∫°n
     * @returns {Promise} K·∫øt qu·∫£ ch·∫•p nh·∫≠n y√™u c·∫ßu
     */
    async acceptFriendRequest(friendshipId) {
        try {
            const response = await this.api.put(`/accept/${friendshipId}`);
            return response.data;
        } catch (error) {
            console.error('Error accepting friend request:', error);
            throw error;
        }
    }

    /**
     * T·ª´ ch·ªëi y√™u c·∫ßu k·∫øt b·∫°n
     * @param {number} friendshipId - ID c·ªßa y√™u c·∫ßu k·∫øt b·∫°n
     * @returns {Promise} K·∫øt qu·∫£ t·ª´ ch·ªëi y√™u c·∫ßu
     */
    async rejectFriendRequest(friendshipId) {
        try {
            const response = await this.api.delete(`/reject/${friendshipId}`);
            return response.data;
        } catch (error) {
            console.error('Error rejecting friend request:', error);
            throw error;
        }
    }

    /**
     * L·∫•y danh s√°ch b·∫°n b√®
     * @returns {Promise} Danh s√°ch b·∫°n b√®
     */
    async getFriends() {
        try {
            // const response = await this.api.get('/friends');
            // return response.data;
            // ƒê·∫£m b·∫£o endpoint n√†y tr·∫£ v·ªÅ danh s√°ch b·∫°n b√®, kh√¥ng ph·∫£i posts
            console.log('Calling friends API...');
            const response = await this.api.get('/friends'); // Ki·ªÉm tra l·∫°i endpoint n√†y
            console.log('Response from friends API:', response.data);
            return response.data;
        } catch (error) {
            console.error('Error getting friends:', error);
            throw error;
        }
    }



    /**
     * L·∫•y danh s√°ch y√™u c·∫ßu k·∫øt b·∫°n ƒë√£ g·ª≠i
     * @returns {Promise} Danh s√°ch y√™u c·∫ßu ƒë√£ g·ª≠i
     */
    async getSentFriendRequests() {
        try {
            const response = await this.api.get('/requests/sent');
            return response.data;
        } catch (error) {
            console.error('Error getting sent friend requests:', error);
            throw error;
        }
    }
    // Ph∆∞∆°ng th·ª©c l·∫•y danh s√°ch y√™u c·∫ßu k·∫øt b·∫°n ƒëang ch·ªù
    async getPendingFriendRequests() {
        try {
            const response = await this.api.get('/requests/sent');
            return response.data;
        } catch (error) {
            console.error('Error fetching pending friend requests:', error);
            throw error;
        }
    }

    /**
     * L·∫•y danh s√°ch y√™u c·∫ßu k·∫øt b·∫°n ƒë√£ nh·∫≠n
     * @returns {Promise} Danh s√°ch y√™u c·∫ßu ƒë√£ nh·∫≠n
     */
    async getReceivedFriendRequests() {
        try {
            const response = await this.api.get('/requests/received');
            return response.data;
        } catch (error) {
            console.error('Error getting received friend requests:', error);
            throw error;
        }
    }

    /**
     * H·ªßy k·∫øt b·∫°n (th√™m ph∆∞∆°ng th·ª©c n√†y m·∫∑c d√π kh√¥ng c√≥ trong controller)
     * @param {number} userId - ID c·ªßa ng∆∞·ªùi d√πng mu·ªën h·ªßy k·∫øt b·∫°n
     * @returns {Promise} K·∫øt qu·∫£ h·ªßy k·∫øt b·∫°n
     */
    async unfriend(userId) {
        try {
            // Gi·∫£ s·ª≠ endpoint n√†y t·ªìn t·∫°i tr√™n backend
            const response = await this.api.delete(`/friends/${userId}`);
            return response.data;
        } catch (error) {
            console.error('Error unfriending:', error);
            throw error;
        }
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i b·∫°n b√® cho 1 user - An to√†n h∆°n
     * @param {number} userId - ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn ki·ªÉm tra
     * @returns {Promise<string>} Tr·∫°ng th√°i b·∫°n b√®
     */
    async checkSingleFriendStatus(userId) {
        try {
            console.log('üîç Checking single friend status for user:', userId);
            
            // S·ª≠ d·ª•ng batch API v·ªõi 1 user
            const statusMap = await this.getBatchFriendshipStatus([userId]);
            const status = statusMap[userId] || 'NOT_FRIEND';
            
            console.log('‚úÖ Single friend status:', status);
            return status;
            
        } catch (error) {
            console.error('‚ùå Error checking single friend status:', error);
            return 'NOT_FRIEND';
        }
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i b·∫°n b√®
     * @param {number} userId - ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn ki·ªÉm tra
     * @returns {Promise<string>} Tr·∫°ng th√°i b·∫°n b√®
     */
    async checkFriendStatus(userId) {
        try {
            console.log('üîç Checking friend status for user:', userId);
            
            // S·ª≠ d·ª•ng single method m·ªõi
            return await this.checkSingleFriendStatus(userId);
            
        } catch (error) {
            console.error('‚ùå Error in checkFriendStatus:', error);
            return 'NOT_FRIEND';
        }
    }

    // Trong FriendService.js

// Th√™m ph∆∞∆°ng th·ª©c t√¨m ki·∫øm ng∆∞·ªùi d√πng theo email
    async findUserByEmail(email) {
        try {
            const response = await this.api.get('/find-user-by-email', {
                params: { email }
            });
            return response.data;
        } catch (error) {
            console.error('Error finding user by email:', error);
            throw error;
        }
    }



    /**
     * H·ªßy y√™u c·∫ßu k·∫øt b·∫°n ƒë√£ g·ª≠i
     * @param {number} friendshipId - ID c·ªßa friendship record
     * @returns {Promise} K·∫øt qu·∫£ h·ªßy y√™u c·∫ßu
     */
    async cancelFriendRequest(friendshipId) {
        try {
            console.log('ƒêang h·ªßy y√™u c·∫ßu k·∫øt b·∫°n ID:', friendshipId);

            const response = await this.api.delete(`/cancel-request/${friendshipId}`);

            console.log('Ph·∫£n h·ªìi t·ª´ API h·ªßy l·ªùi m·ªùi:', response.data);
            return response.data;
        } catch (error) {
            console.error('Error canceling friend request:', error);
            throw error;
        }
    }

    /**
     * L·∫•y tr·∫°ng th√°i k·∫øt b·∫°n h√†ng lo·∫°t cho nhi·ªÅu user
     * @param {Array<number>} userIds - Danh s√°ch ID ng∆∞·ªùi d√πng c·∫ßn ki·ªÉm tra
     * @returns {Promise<Object>} Object mapping userId -> status
     */
    async getBatchFriendshipStatus(userIds) {
        try {
            console.log('üîç Checking friendship status for users:', userIds);
            
            const response = await this.api.post('/batch-status', {
                userIds: userIds
            });
            
            console.log('‚úÖ Batch friendship status response:', response.data);
            return response.data.data || response.data;
        } catch (error) {
            console.error('‚ùå Error getting batch friendship status:', error);
            
            // Fallback: Return NOT_FRIEND for all users to avoid calling checkFriendStatus (infinite loop)
            console.log('‚ö†Ô∏è Using fallback: setting all users as NOT_FRIEND');
            const statusMap = {};
            for (const userId of userIds) {
                statusMap[userId] = 'NOT_FRIEND';
            }
            return statusMap;
        }
    }
}

// Export instance thay v√¨ class ƒë·ªÉ c√≥ th·ªÉ g·ªçi method tr·ª±c ti·∫øp
const friendService = new FriendService();
export default friendService;
