import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { BASE_URL } from './api';

// Create a specific API instance for sports participant management
// Maps to SportsPostParticipantController.java
const sportsParticipantApi = axios.create({
  baseURL: `${BASE_URL}/sports-posts/participants`,
  timeout: 15000,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  }
});

console.log('üèóÔ∏è SportsPostParticipantService initialized');
console.log('üìã This service maps to SportsPostParticipantController.java');
console.log('üéØ Base URL:', `${BASE_URL}/api/sports-posts/participants`);

// Add interceptors
sportsParticipantApi.interceptors.request.use(
  async (config) => {
    try {
      const token = await AsyncStorage.getItem('accessToken');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
    } catch (error) {
      console.warn('Failed to get token:', error);
    }
    return config;
  },
  (error) => Promise.reject(error)
);

sportsParticipantApi.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response?.status === 401) {
      try {
        await AsyncStorage.multiRemove(['accessToken', 'refreshToken', 'userData']);
      } catch (storageError) {
        console.error('Error clearing storage:', storageError);
      }
    }
    return Promise.reject(error);
  }
);

// X·ª≠ l√Ω l·ªói API
const handleApiError = (error, defaultMessage) => {
  const errorMessage = 
    error.response?.data?.message || 
    error.response?.data?.error || 
    error.message || 
    defaultMessage;
  
  console.error('SportsPostParticipant API Error:', {
    message: errorMessage,
    status: error.response?.status || 500,
    error: true
  });
  
  throw new Error(errorMessage);
};

// ===== PARTICIPANT MANAGEMENT APIs =====

/**
 * G·ª≠i y√™u c·∫ßu tham gia b√†i ƒëƒÉng th·ªÉ thao
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @param {string} joinMessage - Tin nh·∫Øn k√®m theo (c√≥ th·ªÉ ƒë·ªÉ tr·ªëng)
 * @returns {Promise} - K·∫øt qu·∫£ y√™u c·∫ßu tham gia
 */
export const joinSportsPost = async (postId, joinMessage = '') => {
  try {
    console.log(`üèÉ‚Äç‚ôÇÔ∏è Joining sports post ${postId} with message:`, joinMessage);
    console.log(`üîó API URL: ${sportsParticipantApi.defaults.baseURL}/${postId}/join`);
    console.log(`üîó Full URL: ${BASE_URL}/api/sports-posts/participants/${postId}/join`);
    
    // G·ª≠i joinMessage nh∆∞ m·ªôt JSON object, ho·∫∑c string plain text
    const response = await sportsParticipantApi.post(`/${postId}/join`, joinMessage || "T√¥i mu·ªën tham gia b√†i ƒëƒÉng n√†y!", {
      headers: { 
        'Content-Type': 'text/plain',
        'Accept': 'application/json'
      }
    });
    
    console.log('‚úÖ Successfully joined sports post:', response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error joining sports post ${postId}:`, error);
    console.error('Error details:', {
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      headers: error.response?.headers,
      url: error.config?.url,
      method: error.config?.method
    });
    throw handleApiError(error, 'Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu tham gia');
  }
};

/**
 * H·ªßy y√™u c·∫ßu tham gia
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @returns {Promise} - K·∫øt qu·∫£ h·ªßy tham gia
 */
export const leaveSportsPost = async (postId) => {
  try {
    console.log(`üö™ Leaving sports post ${postId}`);
    
    const response = await sportsParticipantApi.delete(`/${postId}/leave`);
    
    console.log('‚úÖ Successfully left sports post');
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error leaving sports post ${postId}:`, error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ h·ªßy tham gia');
  }
};

/**
 * L·∫•y tr·∫°ng th√°i tham gia c·ªßa user hi·ªán t·∫°i cho b√†i ƒëƒÉng
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @returns {Promise} - Tr·∫°ng th√°i tham gia
 */
export const getUserParticipationStatus = async (postId) => {
  try {
    console.log(`üìä Getting participation status for post ${postId}`);
    
    const response = await sportsParticipantApi.get(`/${postId}/participation-status`);
    
    console.log('‚úÖ Successfully retrieved participation status:', response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error getting participation status for post ${postId}:`, error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i tham gia');
  }
};

/**
 * L·∫•y T·ªîNG danh s√°ch ng∆∞·ªùi tham gia c·ªßa b√†i ƒëƒÉng (bao g·ªìm c·∫£ PENDING)
 * Endpoint: GET /api/sports-posts/participants/{postId}
 * Controller: SportsPostParticipantController.java
 * 
 * L∆ØU √ù: Kh√°c v·ªõi SportsPostService.getParticipants() ch·ªâ l·∫•y ACCEPTED
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @param {number} page - S·ªë trang
 * @param {number} size - S·ªë l∆∞·ª£ng m·ªói trang
 * @returns {Promise} - Danh s√°ch T·∫§T C·∫¢ ng∆∞·ªùi tham gia (PENDING + ACCEPTED)
 */
export const getParticipants = async (postId, page = 0, size = 10) => {
  try {
    console.log(`üë• Getting ALL participants (including PENDING) for post ${postId}, page=${page}, size=${size}`);
    console.log(`üéØ Using endpoint: GET /api/sports-posts/participants/${postId}`);
    console.log(`üìã This endpoint returns ALL participants including PENDING (for management)`);
    
    const response = await sportsParticipantApi.get(`/${postId}`, {
      params: { page, size }
    });
    
    console.log('‚úÖ Successfully retrieved participants:', response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error getting participants for post ${postId}:`, error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi tham gia');
  }
};

/**
 * L·∫•y danh s√°ch ng∆∞·ªùi tham gia ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @returns {Promise} - Danh s√°ch ng∆∞·ªùi tham gia ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n
 */
export const getAcceptedParticipants = async (postId) => {
  try {
    console.log(`‚úÖ Getting accepted participants for post ${postId}`);
    
    const response = await sportsParticipantApi.get(`/${postId}/accepted`);
    
    console.log('‚úÖ Successfully retrieved accepted participants:', response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error getting accepted participants for post ${postId}:`, error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi tham gia ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n');
  }
};

/**
 * L·∫•y danh s√°ch y√™u c·∫ßu ƒëang ch·ªù duy·ªát
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @param {number} page - S·ªë trang
 * @param {number} size - S·ªë l∆∞·ª£ng m·ªói trang
 * @returns {Promise} - Danh s√°ch y√™u c·∫ßu ch·ªù duy·ªát
 */
export const getPendingRequests = async (postId, page = 0, size = 10) => {
  try {
    console.log(`‚è≥ Getting pending requests for post ${postId}, page=${page}, size=${size}`);
    
    const response = await sportsParticipantApi.get(`/${postId}/pending`, {
      params: { page, size }
    });
    
    console.log('‚úÖ Successfully retrieved pending requests:', response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error getting pending requests for post ${postId}:`, error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch y√™u c·∫ßu ch·ªù duy·ªát');
  }
};

/**
 * Ph√™ duy·ªát ho·∫∑c t·ª´ ch·ªëi y√™u c·∫ßu tham gia (d√†nh cho creator)
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @param {number} participantId - ID c·ªßa ng∆∞·ªùi tham gia
 * @param {boolean} approve - true: ch·∫•p nh·∫≠n, false: t·ª´ ch·ªëi
 * @param {string} responseMessage - Tin nh·∫Øn ph·∫£n h·ªìi (c√≥ th·ªÉ ƒë·ªÉ tr·ªëng)
 * @returns {Promise} - K·∫øt qu·∫£ ph√™ duy·ªát
 */
export const respondToJoinRequest = async (postId, participantId, approve, responseMessage = '') => {
  try {
    console.log(`üîÑ Responding to join request: postId=${postId}, participantId=${participantId}, approve=${approve}`);
    
    const response = await sportsParticipantApi.post(
      `/${postId}/participants/${participantId}/respond`, 
      responseMessage, 
      {
        params: { approve },
        headers: { 'Content-Type': 'text/plain' }
      }
    );
    
    console.log('‚úÖ Successfully responded to join request:', response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error responding to join request:`, error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu tham gia');
  }
};

/**
 * L·∫•y l·ªãch s·ª≠ tham gia c·ªßa user
 * @param {string} status - Tr·∫°ng th√°i (PENDING, ACCEPTED, DECLINED ho·∫∑c ALL)
 * @param {number} page - S·ªë trang
 * @param {number} size - S·ªë l∆∞·ª£ng m·ªói trang
 * @returns {Promise} - L·ªãch s·ª≠ tham gia
 */
export const getParticipationHistory = async (status = 'ALL', page = 0, size = 10) => {
  try {
    console.log(`üìú Getting participation history: status=${status}, page=${page}, size=${size}`);
    
    const response = await sportsParticipantApi.get('/participation-history', {
      params: { status, page, size }
    });
    
    console.log('‚úÖ Successfully retrieved participation history:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error getting participation history:', error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ tham gia');
  }
};

/**
 * L·∫•y t·∫•t c·∫£ y√™u c·∫ßu ch·ªù duy·ªát c·ªßa creator hi·ªán t·∫°i
 * @param {number} page - S·ªë trang
 * @param {number} size - S·ªë l∆∞·ª£ng m·ªói trang
 * @returns {Promise} - Danh s√°ch y√™u c·∫ßu ch·ªù duy·ªát
 */
export const getAllPendingRequestsForCurrentUser = async (page = 0, size = 20) => {
  try {
    console.log(`‚è≥ Getting all pending requests for current user: page=${page}, size=${size}`);
    
    const response = await sportsParticipantApi.get('/my-pending-requests', {
      params: { page, size }
    });
    
    console.log('‚úÖ Successfully retrieved pending requests for current user:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error getting pending requests for current user:', error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch y√™u c·∫ßu ch·ªù duy·ªát');
  }
};

/**
 * L·∫•y danh s√°ch b√†i ƒëƒÉng m√† user ƒë√£ tham gia
 * @param {number} page - S·ªë trang
 * @param {number} size - S·ªë l∆∞·ª£ng m·ªói trang
 * @returns {Promise} - Danh s√°ch b√†i ƒëƒÉng ƒë√£ tham gia
 */
export const getUserJoinedPosts = async (page = 0, size = 10) => {
  try {
    console.log(`üìã Getting user joined posts: page=${page}, size=${size}`);
    
    const response = await sportsParticipantApi.get('/my-joined-posts', {
      params: { page, size }
    });
    
    console.log('‚úÖ Successfully retrieved user joined posts:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error getting user joined posts:', error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch b√†i ƒëƒÉng ƒë√£ tham gia');
  }
};

/**
 * L·∫•y danh s√°ch b√†i ƒëƒÉng m√† user ƒë√£ t·∫°o
 * @param {number} page - S·ªë trang
 * @param {number} size - S·ªë l∆∞·ª£ng m·ªói trang
 * @returns {Promise} - Danh s√°ch b√†i ƒëƒÉng ƒë√£ t·∫°o
 */
export const getUserCreatedPosts = async (page = 0, size = 10) => {
  try {
    console.log(`üìù Getting user created posts: page=${page}, size=${size}`);
    
    const response = await sportsParticipantApi.get('/my-created-posts', {
      params: { page, size }
    });
    
    console.log('‚úÖ Successfully retrieved user created posts:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error getting user created posts:', error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch b√†i ƒëƒÉng ƒë√£ t·∫°o');
  }
};

/**
 * Ki·ªÉm tra user ƒë√£ tham gia b√†i ƒëƒÉng ch∆∞a
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @returns {Promise<boolean>} - true n·∫øu ƒë√£ tham gia
 */
export const hasUserJoined = async (postId) => {
  try {
    console.log(`‚ùì Checking if user has joined post ${postId}`);
    
    const response = await sportsParticipantApi.get(`/${postId}/has-joined`);
    
    console.log(`‚úÖ User joined status for post ${postId}:`, response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error checking if user joined post ${postId}:`, error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i tham gia');
  }
};

/**
 * Ki·ªÉm tra user c√≥ y√™u c·∫ßu ƒëang ch·ªù duy·ªát kh√¥ng
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @returns {Promise<boolean>} - true n·∫øu c√≥ y√™u c·∫ßu ch·ªù duy·ªát
 */
export const hasPendingRequest = async (postId) => {
  try {
    console.log(`‚ùì Checking if user has pending request for post ${postId}`);
    
    const response = await sportsParticipantApi.get(`/${postId}/has-pending-request`);
    
    console.log(`‚úÖ User pending request status for post ${postId}:`, response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error checking pending request for post ${postId}:`, error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ ki·ªÉm tra y√™u c·∫ßu ch·ªù duy·ªát');
  }
};

/**
 * ƒê·∫øm s·ªë ng∆∞·ªùi tham gia c·ªßa m·ªôt b√†i ƒëƒÉng
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @returns {Promise<number>} - S·ªë l∆∞·ª£ng ng∆∞·ªùi tham gia
 */
export const countParticipants = async (postId) => {
  try {
    console.log(`üî¢ Counting participants for post ${postId}`);
    
    const response = await sportsParticipantApi.get(`/${postId}/count`);
    
    console.log(`‚úÖ Participant count for post ${postId}:`, response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error counting participants for post ${postId}:`, error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ ƒë·∫øm s·ªë ng∆∞·ªùi tham gia');
  }
};

/**
 * Batch approve multiple join requests
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @param {Array<number>} participantIds - Danh s√°ch ID ng∆∞·ªùi tham gia
 * @param {string} responseMessage - Tin nh·∫Øn ph·∫£n h·ªìi
 * @returns {Promise} - K·∫øt qu·∫£ batch approve
 */
export const batchApproveRequests = async (postId, participantIds, responseMessage = '') => {
  try {
    console.log(`‚úÖ Batch approving ${participantIds.length} requests for post ${postId}`);
    
    const response = await sportsParticipantApi.post(`/${postId}/batch-approve`, {
      participantIds,
      responseMessage
    });
    
    console.log('‚úÖ Successfully batch approved requests:', response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error batch approving requests:`, error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ duy·ªát h√†ng lo·∫°t y√™u c·∫ßu');
  }
};

/**
 * Batch decline multiple join requests
 * @param {number} postId - ID c·ªßa b√†i ƒëƒÉng
 * @param {Array<number>} participantIds - Danh s√°ch ID ng∆∞·ªùi tham gia
 * @param {string} responseMessage - Tin nh·∫Øn ph·∫£n h·ªìi
 * @returns {Promise} - K·∫øt qu·∫£ batch decline
 */
export const batchDeclineRequests = async (postId, participantIds, responseMessage = '') => {
  try {
    console.log(`‚ùå Batch declining ${participantIds.length} requests for post ${postId}`);
    
    const response = await sportsParticipantApi.post(`/${postId}/batch-decline`, {
      participantIds,
      responseMessage
    });
    
    console.log('‚úÖ Successfully batch declined requests:', response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error batch declining requests:`, error);
    throw handleApiError(error, 'Kh√¥ng th·ªÉ t·ª´ ch·ªëi h√†ng lo·∫°t y√™u c·∫ßu');
  }
};

export default {
  // Participant management
  joinSportsPost,
  leaveSportsPost,
  getUserParticipationStatus,
  getParticipants,
  getAcceptedParticipants,
  getPendingRequests,
  respondToJoinRequest,
  getParticipationHistory,
  getAllPendingRequestsForCurrentUser,
  getUserJoinedPosts,
  getUserCreatedPosts,
  hasUserJoined,
  hasPendingRequest,
  countParticipants,
  batchApproveRequests,
  batchDeclineRequests
}; 